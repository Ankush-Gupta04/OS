diff --git linux-5.18.8/arch/x86/entry/syscalls/syscall_64.tbl os/OS/A2/Q2/linux-5.18.8/arch/x86/entry/syscalls/syscall_64.tbl
index f6b5779..e2b714e 100644
--- linux-5.18.8/arch/x86/entry/syscalls/syscall_64.tbl
+++ os/OS/A2/Q2/linux-5.18.8/arch/x86/entry/syscalls/syscall_64.tbl
@@ -369,7 +369,7 @@
 449	common	futex_waitv               sys_futex_waitv
 450	common	set_mempolicy_home_node   sys_set_mempolicy_home_node
-
+451  common  kernel_2d_memcpy          sys_kernel_2d_memcpy
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git os/OS/A2/Q2/linux-5.18.8/kernel/sys.c os/OS/A2/Q2/linux-5.18.8/kernel/sys.c
index ef1a78f..14c6cf3 100644
--- linux-5.18.8/kernel/sys.c
+++ os/OS/A2/Q2/linux-5.18.8/kernel/sys.c
@@ -199,7 +199,23 @@ static int set_one_prio(struct task_struct *p, int niceval, int error)
 out:
 	return error;
 }
-
+SYSCALL_DEFINE4( kernel_2d_memcpy, float**, dst, float**, src, int, row, int, col){
+    float temp[row][col];
+    int first  = __copy_from_user(temp, src, sizeof(temp));
+    if (first != 0){
+        printk("fail (from): look at internal implementation under SYSCALL_DEFINE4 for more details\n");
+        return -1;
+    }
+    int second = __copy_to_user(dst, temp, sizeof(temp));
+    if (second){
+        printk("failed (to): look at internal implementation under SYSCALL_DEFINE4 for more details\n");
+        return -1;
+    }
+    printk(KERN_INFO "kernel_2d_memcpy syscall executed successfully !!");
+    return 0;
+}
